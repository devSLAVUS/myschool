#!groovy
properties([disableConcurrentBuilds()])
def get_mail() {
    node('master'){
        USER_MAIL = wrap([$class: 'BuildUser']) {
            return env.BUILD_USER_EMAIL
        }
    }
}

def USER_MAIL = get_mail()
  
node ("master") {
  checkout scm

      timestamps {
      properties([
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
              
    ])
         stage("docker login") {
            
                echo " ============== docker login =================="
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    echo $USERNAME 
                    echo $PASSWORD
                    ssh root@prodstage docker login --username $USERNAME --password $PASSWORD
                    docker login -u $USERNAME -p $PASSWORD
                    """
                }
            
        
    stage("docker build") {
            
            echo " ============== start building image =================="
                dir ('django_school/') {
                	sh 'docker build -t devslavus/myschool:latest . '
                }
        }
   stage("docker push") {
                echo " ============== start pushing image =================="
                sh '''
                docker push devslavus/myschool:latest
                '''
            }
        
   stage('del image') {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh '''
                ssh -t root@prodstage "hostname; docker stop myschool; docker rm myschool; docker image prune -f"
                '''
                
            } 
   }
   stage("run docker") {
                echo " ============== prepare host =================="
               
                sh "chmod +x -R ${env.WORKSPACE}"
                    dir ('tool/') {     
                        
                sh '''
                ssh root@prodstage 'bash -s' < install.sh    
                    ssh -t root@prodstage "hostname; docker pull devslavus/myschool; docker run --name myschool -d -p 80:80 devslavus/myschool:latest"
                '''
                    }
  
  }                   }
                }
            }
        


